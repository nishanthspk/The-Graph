// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class UserRegistered extends ethereum.Event {
  get params(): UserRegistered__Params {
    return new UserRegistered__Params(this);
  }
}

export class UserRegistered__Params {
  _event: UserRegistered;

  constructor(event: UserRegistered) {
    this._event = event;
  }

  get userId(): string {
    return this._event.parameters[0].value.toString();
  }

  get mainAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UserRegistry__usersResult {
  value0: Address;
  value1: boolean;
  value2: string;

  constructor(value0: Address, value1: boolean, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getMainAddress(): Address {
    return this.value0;
  }

  getExists(): boolean {
    return this.value1;
  }

  getUserId(): string {
    return this.value2;
  }
}

export class UserRegistry extends ethereum.SmartContract {
  static bind(address: Address): UserRegistry {
    return new UserRegistry("UserRegistry", address);
  }

  allOtherAddresses(param0: Address): boolean {
    let result = super.call(
      "allOtherAddresses",
      "allOtherAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_allOtherAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allOtherAddresses",
      "allOtherAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMainAddress(userId: string): Address {
    let result = super.call(
      "getMainAddress",
      "getMainAddress(string):(address)",
      [ethereum.Value.fromString(userId)],
    );

    return result[0].toAddress();
  }

  try_getMainAddress(userId: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMainAddress",
      "getMainAddress(string):(address)",
      [ethereum.Value.fromString(userId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOtherAddresses(userId: string): Array<Address> {
    let result = super.call(
      "getOtherAddresses",
      "getOtherAddresses(string):(address[])",
      [ethereum.Value.fromString(userId)],
    );

    return result[0].toAddressArray();
  }

  try_getOtherAddresses(userId: string): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getOtherAddresses",
      "getOtherAddresses(string):(address[])",
      [ethereum.Value.fromString(userId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserIdByAddress(givenaddress: Address): string {
    let result = super.call(
      "getUserIdByAddress",
      "getUserIdByAddress(address):(string)",
      [ethereum.Value.fromAddress(givenaddress)],
    );

    return result[0].toString();
  }

  try_getUserIdByAddress(givenaddress: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getUserIdByAddress",
      "getUserIdByAddress(address):(string)",
      [ethereum.Value.fromAddress(givenaddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  mainAddresses(param0: BigInt): Address {
    let result = super.call(
      "mainAddresses",
      "mainAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_mainAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mainAddresses",
      "mainAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userIdExists(param0: string): boolean {
    let result = super.call("userIdExists", "userIdExists(string):(bool)", [
      ethereum.Value.fromString(param0),
    ]);

    return result[0].toBoolean();
  }

  try_userIdExists(param0: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("userIdExists", "userIdExists(string):(bool)", [
      ethereum.Value.fromString(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userIds(param0: Address): string {
    let result = super.call("userIds", "userIds(address):(string)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toString();
  }

  try_userIds(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("userIds", "userIds(address):(string)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  users(param0: Address): UserRegistry__usersResult {
    let result = super.call("users", "users(address):(address,bool,string)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return new UserRegistry__usersResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toString(),
    );
  }

  try_users(param0: Address): ethereum.CallResult<UserRegistry__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(address,bool,string)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UserRegistry__usersResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toString(),
      ),
    );
  }
}

export class AddOtherAddressCall extends ethereum.Call {
  get inputs(): AddOtherAddressCall__Inputs {
    return new AddOtherAddressCall__Inputs(this);
  }

  get outputs(): AddOtherAddressCall__Outputs {
    return new AddOtherAddressCall__Outputs(this);
  }
}

export class AddOtherAddressCall__Inputs {
  _call: AddOtherAddressCall;

  constructor(call: AddOtherAddressCall) {
    this._call = call;
  }

  get userId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get otherAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddOtherAddressCall__Outputs {
  _call: AddOtherAddressCall;

  constructor(call: AddOtherAddressCall) {
    this._call = call;
  }
}

export class DeleteOtherAddressCall extends ethereum.Call {
  get inputs(): DeleteOtherAddressCall__Inputs {
    return new DeleteOtherAddressCall__Inputs(this);
  }

  get outputs(): DeleteOtherAddressCall__Outputs {
    return new DeleteOtherAddressCall__Outputs(this);
  }
}

export class DeleteOtherAddressCall__Inputs {
  _call: DeleteOtherAddressCall;

  constructor(call: DeleteOtherAddressCall) {
    this._call = call;
  }

  get userId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get otherAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeleteOtherAddressCall__Outputs {
  _call: DeleteOtherAddressCall;

  constructor(call: DeleteOtherAddressCall) {
    this._call = call;
  }
}

export class RegisterUserCall extends ethereum.Call {
  get inputs(): RegisterUserCall__Inputs {
    return new RegisterUserCall__Inputs(this);
  }

  get outputs(): RegisterUserCall__Outputs {
    return new RegisterUserCall__Outputs(this);
  }
}

export class RegisterUserCall__Inputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get userId(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RegisterUserCall__Outputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }
}
